from tqdm import tqdm
import time
import concurrent.futures

class Progress:
    def __init__(self, tasks):
        self.tasks = tasks
        self.progress_bars = {}
    
    def update(self, task_name, progress):
        if task_name in self.progress_bars:
            self.progress_bars[task_name].update(progress)
    
    def init(self):
        for task in self.tasks:
            self.progress_bars[task] = tqdm(desc=f"Task: {task}", total=100, unit="%")
    
    def close(self):
        for progress_bar in self.progress_bars.values():
            progress_bar.close()

tasks = [1, 3, 2]

watch_dog = Progress(tasks)
watch_dog.init()

def process(task):
    # Updating the progress of a specific task
    for i in range(100):
        watch_dog.update(task, 1)
        time.sleep(task/10)
    return '1'

with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
    # Start the load operations and mark each future with its task name
    futures = [executor.submit(process, task) for task in tasks]
    for future in concurrent.futures.as_completed(futures):
        try:
            data = future.result()
        except Exception as exc:
            # print('Task generated an exception:', exc)
            pass
        else:
            # print('Task completed:', data)
            pass

watch_dog.close()
